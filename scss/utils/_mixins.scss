// Flexbox Mixin
// Centra elementos usando flexbox, con opciones para dirección, justificación y alineación.
@mixin flex-center($direction: row, $justify: center, $align: center) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

// Grid Mixin
// Configura un layout de grid con columnas, filas y espacio entre elementos.
@mixin grid-layout($columns: 1fr, $rows: auto, $gap: $gap-medium) { // Usa la variable $gap-medium como valor por defecto para el gap
  display: grid;
  grid-template-columns: $columns;
  grid-template-rows: $rows;
  grid-gap: $gap;
}

// Responsive Typography Mixin
// Define tamaños de fuente responsivos, con un tamaño pequeño para pantallas pequeñas y uno grande para pantallas grandes.
@mixin responsive-font-size($small-size, $large-size) {
  font-size: $small-size;

  @media (min-width: $breakpoint-desktop) {
    font-size: $large-size;
  }
}

// Media Query Mixin
// Utiliza este mixin para aplicar estilos específicos en puntos de quiebre de dispositivos.
@mixin respond-to($breakpoint) {
  @if $breakpoint == mobile {
    @media (max-width: $breakpoint-mobile) { @content; }
  } @else if $breakpoint == tablet {
    @media (max-width: $breakpoint-tablet) { @content; }
  } @else if $breakpoint == desktop {
    @media (max-width: $breakpoint-desktop) { @content; }
  }
}

// Custom Padding Mixin
// Aplica un padding personalizado basado en las variables de espacio definidas.
@mixin custom-padding($size) {
  @if $size == small {
    padding: $padding-small;
  } @else if $size == medium {
    padding: $padding-medium;
  } @else if $size == large {
    padding: $padding-large;
  }
}

// Custom Margin Mixin
// Aplica un margen personalizado basado en las variables de espacio definidas.
@mixin custom-margin($size) {
  @if $size == small {
    margin: $margin-small;
  } @else if $size == medium {
    margin: $margin-medium;
  } @else if $size == large {
    margin: $margin-large;
  }
}
